/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SettingsRouteImport } from './routes/settings/route'
import { Route as DesignPlaygroundRouteImport } from './routes/design-playground/route'
import { Route as ChatRouteImport } from './routes/chat/route'
import { Route as IndexImport } from './routes/index'
import { Route as SettingsIndexImport } from './routes/settings/index'
import { Route as DesignPlaygroundIndexImport } from './routes/design-playground/index'
import { Route as ChatIndexImport } from './routes/chat/index'
import { Route as SettingsDeveloperImport } from './routes/settings/developer'
import { Route as SettingsChatsImport } from './routes/settings/chats'
import { Route as SettingsAppearanceImport } from './routes/settings/appearance'
import { Route as SettingsPluginsIndexImport } from './routes/settings/plugins/index'
import { Route as ChatIdIndexImport } from './routes/chat/$id/index'
import { Route as SettingsPluginsIdImport } from './routes/settings/plugins/$id'
import { Route as DesignPlaygroundElementsTooltipImport } from './routes/design-playground/elements/tooltip'
import { Route as DesignPlaygroundElementsMarkdownImport } from './routes/design-playground/elements/markdown'
import { Route as DesignPlaygroundElementsInputsImport } from './routes/design-playground/elements/inputs'
import { Route as DesignPlaygroundElementsDialogImport } from './routes/design-playground/elements/dialog'
import { Route as DesignPlaygroundElementsButtonImport } from './routes/design-playground/elements/button'

// Create/Update Routes

const SettingsRouteRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRoute,
} as any)

const DesignPlaygroundRouteRoute = DesignPlaygroundRouteImport.update({
  id: '/design-playground',
  path: '/design-playground',
  getParentRoute: () => rootRoute,
} as any)

const ChatRouteRoute = ChatRouteImport.update({
  id: '/chat',
  path: '/chat',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const SettingsIndexRoute = SettingsIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => SettingsRouteRoute,
} as any)

const DesignPlaygroundIndexRoute = DesignPlaygroundIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DesignPlaygroundRouteRoute,
} as any)

const ChatIndexRoute = ChatIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ChatRouteRoute,
} as any)

const SettingsDeveloperRoute = SettingsDeveloperImport.update({
  id: '/developer',
  path: '/developer',
  getParentRoute: () => SettingsRouteRoute,
} as any)

const SettingsChatsRoute = SettingsChatsImport.update({
  id: '/chats',
  path: '/chats',
  getParentRoute: () => SettingsRouteRoute,
} as any)

const SettingsAppearanceRoute = SettingsAppearanceImport.update({
  id: '/appearance',
  path: '/appearance',
  getParentRoute: () => SettingsRouteRoute,
} as any)

const SettingsPluginsIndexRoute = SettingsPluginsIndexImport.update({
  id: '/plugins/',
  path: '/plugins/',
  getParentRoute: () => SettingsRouteRoute,
} as any)

const ChatIdIndexRoute = ChatIdIndexImport.update({
  id: '/$id/',
  path: '/$id/',
  getParentRoute: () => ChatRouteRoute,
} as any)

const SettingsPluginsIdRoute = SettingsPluginsIdImport.update({
  id: '/plugins/$id',
  path: '/plugins/$id',
  getParentRoute: () => SettingsRouteRoute,
} as any)

const DesignPlaygroundElementsTooltipRoute =
  DesignPlaygroundElementsTooltipImport.update({
    id: '/elements/tooltip',
    path: '/elements/tooltip',
    getParentRoute: () => DesignPlaygroundRouteRoute,
  } as any)

const DesignPlaygroundElementsMarkdownRoute =
  DesignPlaygroundElementsMarkdownImport.update({
    id: '/elements/markdown',
    path: '/elements/markdown',
    getParentRoute: () => DesignPlaygroundRouteRoute,
  } as any)

const DesignPlaygroundElementsInputsRoute =
  DesignPlaygroundElementsInputsImport.update({
    id: '/elements/inputs',
    path: '/elements/inputs',
    getParentRoute: () => DesignPlaygroundRouteRoute,
  } as any)

const DesignPlaygroundElementsDialogRoute =
  DesignPlaygroundElementsDialogImport.update({
    id: '/elements/dialog',
    path: '/elements/dialog',
    getParentRoute: () => DesignPlaygroundRouteRoute,
  } as any)

const DesignPlaygroundElementsButtonRoute =
  DesignPlaygroundElementsButtonImport.update({
    id: '/elements/button',
    path: '/elements/button',
    getParentRoute: () => DesignPlaygroundRouteRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/chat': {
      id: '/chat'
      path: '/chat'
      fullPath: '/chat'
      preLoaderRoute: typeof ChatRouteImport
      parentRoute: typeof rootRoute
    }
    '/design-playground': {
      id: '/design-playground'
      path: '/design-playground'
      fullPath: '/design-playground'
      preLoaderRoute: typeof DesignPlaygroundRouteImport
      parentRoute: typeof rootRoute
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRoute
    }
    '/settings/appearance': {
      id: '/settings/appearance'
      path: '/appearance'
      fullPath: '/settings/appearance'
      preLoaderRoute: typeof SettingsAppearanceImport
      parentRoute: typeof SettingsRouteImport
    }
    '/settings/chats': {
      id: '/settings/chats'
      path: '/chats'
      fullPath: '/settings/chats'
      preLoaderRoute: typeof SettingsChatsImport
      parentRoute: typeof SettingsRouteImport
    }
    '/settings/developer': {
      id: '/settings/developer'
      path: '/developer'
      fullPath: '/settings/developer'
      preLoaderRoute: typeof SettingsDeveloperImport
      parentRoute: typeof SettingsRouteImport
    }
    '/chat/': {
      id: '/chat/'
      path: '/'
      fullPath: '/chat/'
      preLoaderRoute: typeof ChatIndexImport
      parentRoute: typeof ChatRouteImport
    }
    '/design-playground/': {
      id: '/design-playground/'
      path: '/'
      fullPath: '/design-playground/'
      preLoaderRoute: typeof DesignPlaygroundIndexImport
      parentRoute: typeof DesignPlaygroundRouteImport
    }
    '/settings/': {
      id: '/settings/'
      path: '/'
      fullPath: '/settings/'
      preLoaderRoute: typeof SettingsIndexImport
      parentRoute: typeof SettingsRouteImport
    }
    '/design-playground/elements/button': {
      id: '/design-playground/elements/button'
      path: '/elements/button'
      fullPath: '/design-playground/elements/button'
      preLoaderRoute: typeof DesignPlaygroundElementsButtonImport
      parentRoute: typeof DesignPlaygroundRouteImport
    }
    '/design-playground/elements/dialog': {
      id: '/design-playground/elements/dialog'
      path: '/elements/dialog'
      fullPath: '/design-playground/elements/dialog'
      preLoaderRoute: typeof DesignPlaygroundElementsDialogImport
      parentRoute: typeof DesignPlaygroundRouteImport
    }
    '/design-playground/elements/inputs': {
      id: '/design-playground/elements/inputs'
      path: '/elements/inputs'
      fullPath: '/design-playground/elements/inputs'
      preLoaderRoute: typeof DesignPlaygroundElementsInputsImport
      parentRoute: typeof DesignPlaygroundRouteImport
    }
    '/design-playground/elements/markdown': {
      id: '/design-playground/elements/markdown'
      path: '/elements/markdown'
      fullPath: '/design-playground/elements/markdown'
      preLoaderRoute: typeof DesignPlaygroundElementsMarkdownImport
      parentRoute: typeof DesignPlaygroundRouteImport
    }
    '/design-playground/elements/tooltip': {
      id: '/design-playground/elements/tooltip'
      path: '/elements/tooltip'
      fullPath: '/design-playground/elements/tooltip'
      preLoaderRoute: typeof DesignPlaygroundElementsTooltipImport
      parentRoute: typeof DesignPlaygroundRouteImport
    }
    '/settings/plugins/$id': {
      id: '/settings/plugins/$id'
      path: '/plugins/$id'
      fullPath: '/settings/plugins/$id'
      preLoaderRoute: typeof SettingsPluginsIdImport
      parentRoute: typeof SettingsRouteImport
    }
    '/chat/$id/': {
      id: '/chat/$id/'
      path: '/$id'
      fullPath: '/chat/$id'
      preLoaderRoute: typeof ChatIdIndexImport
      parentRoute: typeof ChatRouteImport
    }
    '/settings/plugins/': {
      id: '/settings/plugins/'
      path: '/plugins'
      fullPath: '/settings/plugins'
      preLoaderRoute: typeof SettingsPluginsIndexImport
      parentRoute: typeof SettingsRouteImport
    }
  }
}

// Create and export the route tree

interface ChatRouteRouteChildren {
  ChatIndexRoute: typeof ChatIndexRoute
  ChatIdIndexRoute: typeof ChatIdIndexRoute
}

const ChatRouteRouteChildren: ChatRouteRouteChildren = {
  ChatIndexRoute: ChatIndexRoute,
  ChatIdIndexRoute: ChatIdIndexRoute,
}

const ChatRouteRouteWithChildren = ChatRouteRoute._addFileChildren(
  ChatRouteRouteChildren,
)

interface DesignPlaygroundRouteRouteChildren {
  DesignPlaygroundIndexRoute: typeof DesignPlaygroundIndexRoute
  DesignPlaygroundElementsButtonRoute: typeof DesignPlaygroundElementsButtonRoute
  DesignPlaygroundElementsDialogRoute: typeof DesignPlaygroundElementsDialogRoute
  DesignPlaygroundElementsInputsRoute: typeof DesignPlaygroundElementsInputsRoute
  DesignPlaygroundElementsMarkdownRoute: typeof DesignPlaygroundElementsMarkdownRoute
  DesignPlaygroundElementsTooltipRoute: typeof DesignPlaygroundElementsTooltipRoute
}

const DesignPlaygroundRouteRouteChildren: DesignPlaygroundRouteRouteChildren = {
  DesignPlaygroundIndexRoute: DesignPlaygroundIndexRoute,
  DesignPlaygroundElementsButtonRoute: DesignPlaygroundElementsButtonRoute,
  DesignPlaygroundElementsDialogRoute: DesignPlaygroundElementsDialogRoute,
  DesignPlaygroundElementsInputsRoute: DesignPlaygroundElementsInputsRoute,
  DesignPlaygroundElementsMarkdownRoute: DesignPlaygroundElementsMarkdownRoute,
  DesignPlaygroundElementsTooltipRoute: DesignPlaygroundElementsTooltipRoute,
}

const DesignPlaygroundRouteRouteWithChildren =
  DesignPlaygroundRouteRoute._addFileChildren(
    DesignPlaygroundRouteRouteChildren,
  )

interface SettingsRouteRouteChildren {
  SettingsAppearanceRoute: typeof SettingsAppearanceRoute
  SettingsChatsRoute: typeof SettingsChatsRoute
  SettingsDeveloperRoute: typeof SettingsDeveloperRoute
  SettingsIndexRoute: typeof SettingsIndexRoute
  SettingsPluginsIdRoute: typeof SettingsPluginsIdRoute
  SettingsPluginsIndexRoute: typeof SettingsPluginsIndexRoute
}

const SettingsRouteRouteChildren: SettingsRouteRouteChildren = {
  SettingsAppearanceRoute: SettingsAppearanceRoute,
  SettingsChatsRoute: SettingsChatsRoute,
  SettingsDeveloperRoute: SettingsDeveloperRoute,
  SettingsIndexRoute: SettingsIndexRoute,
  SettingsPluginsIdRoute: SettingsPluginsIdRoute,
  SettingsPluginsIndexRoute: SettingsPluginsIndexRoute,
}

const SettingsRouteRouteWithChildren = SettingsRouteRoute._addFileChildren(
  SettingsRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/chat': typeof ChatRouteRouteWithChildren
  '/design-playground': typeof DesignPlaygroundRouteRouteWithChildren
  '/settings': typeof SettingsRouteRouteWithChildren
  '/settings/appearance': typeof SettingsAppearanceRoute
  '/settings/chats': typeof SettingsChatsRoute
  '/settings/developer': typeof SettingsDeveloperRoute
  '/chat/': typeof ChatIndexRoute
  '/design-playground/': typeof DesignPlaygroundIndexRoute
  '/settings/': typeof SettingsIndexRoute
  '/design-playground/elements/button': typeof DesignPlaygroundElementsButtonRoute
  '/design-playground/elements/dialog': typeof DesignPlaygroundElementsDialogRoute
  '/design-playground/elements/inputs': typeof DesignPlaygroundElementsInputsRoute
  '/design-playground/elements/markdown': typeof DesignPlaygroundElementsMarkdownRoute
  '/design-playground/elements/tooltip': typeof DesignPlaygroundElementsTooltipRoute
  '/settings/plugins/$id': typeof SettingsPluginsIdRoute
  '/chat/$id': typeof ChatIdIndexRoute
  '/settings/plugins': typeof SettingsPluginsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/settings/appearance': typeof SettingsAppearanceRoute
  '/settings/chats': typeof SettingsChatsRoute
  '/settings/developer': typeof SettingsDeveloperRoute
  '/chat': typeof ChatIndexRoute
  '/design-playground': typeof DesignPlaygroundIndexRoute
  '/settings': typeof SettingsIndexRoute
  '/design-playground/elements/button': typeof DesignPlaygroundElementsButtonRoute
  '/design-playground/elements/dialog': typeof DesignPlaygroundElementsDialogRoute
  '/design-playground/elements/inputs': typeof DesignPlaygroundElementsInputsRoute
  '/design-playground/elements/markdown': typeof DesignPlaygroundElementsMarkdownRoute
  '/design-playground/elements/tooltip': typeof DesignPlaygroundElementsTooltipRoute
  '/settings/plugins/$id': typeof SettingsPluginsIdRoute
  '/chat/$id': typeof ChatIdIndexRoute
  '/settings/plugins': typeof SettingsPluginsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/chat': typeof ChatRouteRouteWithChildren
  '/design-playground': typeof DesignPlaygroundRouteRouteWithChildren
  '/settings': typeof SettingsRouteRouteWithChildren
  '/settings/appearance': typeof SettingsAppearanceRoute
  '/settings/chats': typeof SettingsChatsRoute
  '/settings/developer': typeof SettingsDeveloperRoute
  '/chat/': typeof ChatIndexRoute
  '/design-playground/': typeof DesignPlaygroundIndexRoute
  '/settings/': typeof SettingsIndexRoute
  '/design-playground/elements/button': typeof DesignPlaygroundElementsButtonRoute
  '/design-playground/elements/dialog': typeof DesignPlaygroundElementsDialogRoute
  '/design-playground/elements/inputs': typeof DesignPlaygroundElementsInputsRoute
  '/design-playground/elements/markdown': typeof DesignPlaygroundElementsMarkdownRoute
  '/design-playground/elements/tooltip': typeof DesignPlaygroundElementsTooltipRoute
  '/settings/plugins/$id': typeof SettingsPluginsIdRoute
  '/chat/$id/': typeof ChatIdIndexRoute
  '/settings/plugins/': typeof SettingsPluginsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/chat'
    | '/design-playground'
    | '/settings'
    | '/settings/appearance'
    | '/settings/chats'
    | '/settings/developer'
    | '/chat/'
    | '/design-playground/'
    | '/settings/'
    | '/design-playground/elements/button'
    | '/design-playground/elements/dialog'
    | '/design-playground/elements/inputs'
    | '/design-playground/elements/markdown'
    | '/design-playground/elements/tooltip'
    | '/settings/plugins/$id'
    | '/chat/$id'
    | '/settings/plugins'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/settings/appearance'
    | '/settings/chats'
    | '/settings/developer'
    | '/chat'
    | '/design-playground'
    | '/settings'
    | '/design-playground/elements/button'
    | '/design-playground/elements/dialog'
    | '/design-playground/elements/inputs'
    | '/design-playground/elements/markdown'
    | '/design-playground/elements/tooltip'
    | '/settings/plugins/$id'
    | '/chat/$id'
    | '/settings/plugins'
  id:
    | '__root__'
    | '/'
    | '/chat'
    | '/design-playground'
    | '/settings'
    | '/settings/appearance'
    | '/settings/chats'
    | '/settings/developer'
    | '/chat/'
    | '/design-playground/'
    | '/settings/'
    | '/design-playground/elements/button'
    | '/design-playground/elements/dialog'
    | '/design-playground/elements/inputs'
    | '/design-playground/elements/markdown'
    | '/design-playground/elements/tooltip'
    | '/settings/plugins/$id'
    | '/chat/$id/'
    | '/settings/plugins/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ChatRouteRoute: typeof ChatRouteRouteWithChildren
  DesignPlaygroundRouteRoute: typeof DesignPlaygroundRouteRouteWithChildren
  SettingsRouteRoute: typeof SettingsRouteRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ChatRouteRoute: ChatRouteRouteWithChildren,
  DesignPlaygroundRouteRoute: DesignPlaygroundRouteRouteWithChildren,
  SettingsRouteRoute: SettingsRouteRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/chat",
        "/design-playground",
        "/settings"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/chat": {
      "filePath": "chat/route.tsx",
      "children": [
        "/chat/",
        "/chat/$id/"
      ]
    },
    "/design-playground": {
      "filePath": "design-playground/route.tsx",
      "children": [
        "/design-playground/",
        "/design-playground/elements/button",
        "/design-playground/elements/dialog",
        "/design-playground/elements/inputs",
        "/design-playground/elements/markdown",
        "/design-playground/elements/tooltip"
      ]
    },
    "/settings": {
      "filePath": "settings/route.tsx",
      "children": [
        "/settings/appearance",
        "/settings/chats",
        "/settings/developer",
        "/settings/",
        "/settings/plugins/$id",
        "/settings/plugins/"
      ]
    },
    "/settings/appearance": {
      "filePath": "settings/appearance.tsx",
      "parent": "/settings"
    },
    "/settings/chats": {
      "filePath": "settings/chats.tsx",
      "parent": "/settings"
    },
    "/settings/developer": {
      "filePath": "settings/developer.tsx",
      "parent": "/settings"
    },
    "/chat/": {
      "filePath": "chat/index.tsx",
      "parent": "/chat"
    },
    "/design-playground/": {
      "filePath": "design-playground/index.tsx",
      "parent": "/design-playground"
    },
    "/settings/": {
      "filePath": "settings/index.tsx",
      "parent": "/settings"
    },
    "/design-playground/elements/button": {
      "filePath": "design-playground/elements/button.tsx",
      "parent": "/design-playground"
    },
    "/design-playground/elements/dialog": {
      "filePath": "design-playground/elements/dialog.tsx",
      "parent": "/design-playground"
    },
    "/design-playground/elements/inputs": {
      "filePath": "design-playground/elements/inputs.tsx",
      "parent": "/design-playground"
    },
    "/design-playground/elements/markdown": {
      "filePath": "design-playground/elements/markdown.tsx",
      "parent": "/design-playground"
    },
    "/design-playground/elements/tooltip": {
      "filePath": "design-playground/elements/tooltip.tsx",
      "parent": "/design-playground"
    },
    "/settings/plugins/$id": {
      "filePath": "settings/plugins/$id.tsx",
      "parent": "/settings"
    },
    "/chat/$id/": {
      "filePath": "chat/$id/index.tsx",
      "parent": "/chat"
    },
    "/settings/plugins/": {
      "filePath": "settings/plugins/index.tsx",
      "parent": "/settings"
    }
  }
}
ROUTE_MANIFEST_END */
